\\ https://www.mersenneforum.org/showthread.php?t=23895

assert(predicate,err)=if(!cond,error(err));

\\ Credit to Charles Greathouse for the dickmanrho implementation

eps() = 10^(-5); \\ precision

deBruijnXi(x)={
    my(left, right, m);
    if (x < 1, error ("deBruijnXi: Can't find a xi given x < 1."));
    if (x > 1, left = log(x), left = eps());
    right = 1.35 * log(x) + 1; \\ Heuristic

    \\Bisection
    while (right - left > left * eps(),
        m = (left + right) / 2;
        if (exp(m) - 1 > x * m, right = m, left = m)
    );
    (left + right) / 2
};
addhelp(deBruijnXi, "deBruijnXi(x): Helper function for rhoest.  Finds a xi such that e^xi - 1 = x * xi.");

rhoest(x)={
    my(xi = deBruijnXi(x));
    \\exp(Euler) / sqrt(2 * Pi * x) * exp(1 - exp(xi) + intnum(s = eps(), xi, (exp(s) - 1) / s))
    exp(-eint1(-xi) - x * xi) / sqrt(2 * Pi * x) / xi
};
addhelp(rhoest, "de Bruijn's asymptotic approximation for rho(x), rewritten as in van de Lune and Wattel 1969.  Curiously, their paper shows values for this estimate that differ from those calculated by this function, often as soon as the second decimal place -- but as the difference is in the direction of the true value, I have not looked further into this.");


rhoTable = [1, 3.068528194e-1, 4.860838829e-2, 4.910925648e-3, 3.547247005e-4, 1.964969635e-5, 8.745669953e-7, 3.232069304e-8, 1.016248283e-9, 2.770171838e-11, 6.644809070e-13, 1.419713165e-14, 2.729189030e-16, 4.760639989e-18, 7.589908004e-20];
dickmanrho(x)={
    local(left, right, scale);
    if (x <= 2, return (1 - log(max(x, 1))));
    if (x <= 3, return(
        1 - (1 - log(x - 1))*log(x) + real(dilog(1 - x)) + Pi^2 / 12
    ));

    \\ Asymptotic estimate (scaled for continuity)
    if (x > #rhoTable,
        scale = rhoTable[#rhoTable] / rhoest(#rhoTable);

        \\ Let the scale factor dwindle away, since the estimate is (presumably)
        \\ better in the long run than any scaled version of it.  The exponent
        \\ of 0.25 has been chosen to give the best results for 10 < x < 100
        \\ with a table size of 10.
        scale = (scale - 1) * (#rhoTable / x)^.25 + 1;
        return (precision(rhoest(x) * scale, 9))
    );

    \\ Scaling factors: the factor by which the true value of rho differs from
    \\ the estimates at the endpoints.
    left = rhoTable[floor(x)] / rhoest(floor(x));
    right = rhoTable[ceil(x)] / rhoest(ceil(x));

    \\ Linear interpolation on the scale factors.
    scale = left + (right - left) * (x - floor(x));

    \\ Return a result based on the scale factor and the asymptotic formula.
    precision(rhoest(x) * scale, 9)
};
addhelp(dickmanrho, "Estimates the value of the Dickman rho function. For x <= 3 the exact values are used, up to rounding; up to "#rhoTable" the value is interpolated using known values and rhoest; after "#rhoTable" rhoest is used, along with a correction factor based on the last value in rhoTable.");

\\ lucas2.gp
{
        lucas2(k,P,Q,     n,s,j,Ql,Qh,Uh,Vl,Vh) =
        n = floor(log(k)/log(2)) + 1;
        s = 0;
        while( bittest(k,s) == 0, s = s + 1 );
        Uh = 1; Vl = 2; Vh = P;
        Ql = 1; Qh = 1;
        forstep( j = n-1, s+1, -1,
                Ql = Ql * Qh;
                if( bittest(k,j),
                        Qh = Ql * Q;
                        Uh = Uh * Vh;
                        Vl = Vh * Vl - P * Ql;
                        Vh = Vh * Vh - 2 * Qh,

                        Uh = Uh * Vl - Ql;
                        Vh = Vh * Vl - P * Ql;
                        Vl = Vl * Vl - 2 * Ql;
                        Qh = Ql;
                );
        );
        Ql = Ql * Qh; Qh = Ql * Q;
        Uh = Uh * Vl - Ql;
        Vl = Vh * Vl - P * Ql;
        Ql = Ql * Qh;
        for( j = 1, s,
                Uh = Uh * Vl;
                Vl = Vl * Vl - 2 * Ql;
                Ql = Ql * Ql;
        );
        [Uh,Vl]
}
U(p,q,n)=lucas2(n,p,q)[1];
V(p,q,n)=lucas2(n,p,q)[2];


sympoly(d) = {
   pret=Vec(0,d+1);
   for(i=0,d,pret[i+1]='y^i*'x^(d-i));
   pret
}

plindep(N,d,x,y) = {
    result = lindep(subst(subst(concat(N, sympoly(d)), 'x, x), 'y, y));
    polygcd = content(result[2..#result]);
    apol = Polrev(result[2..#result]\polygcd);
    rpol = -y+x*'x;
    [apol, rpol]
}

printpoly(N,pols,comment) = {
    if(poldegree(pols[1]) > 3,
        my(x=-polcoef(pols[2],0)/polcoef(pols[2],1));
        snfs_difficulty = real(log(polcoef(pols[2],1)^poldegree(pols[1])*eval(pols[1]))/log(10));
        gnfs_difficulty = snfs_difficulty*.56+30;
        d = poldegree(pols[1]);
        skew = (abs(polcoef(pols[1],0))/abs(polcoef(pols[1],d)))^(1/d);
        if(comment, printf("# %s\n", comment));
        printf("# Murphy E?: %.06e\n", polyscore(pols, skew));
        printf("# SNFS difficulty: %.01f\n# GNFS equivalent: %.01f\n", snfs_difficulty, gnfs_difficulty);
        printf("# 4/13 pretest: t%.02f\n", gnfs_difficulty*4/13);
        printf("#  1/3 pretest: t%.02f\n", gnfs_difficulty/3);
        printf("type: snfs\nn: %d\nskew: %.02f\n", N, skew);
        for (i = 0, d, if(polcoef(pols[1],i) != 0, printf("c%d: %d\n", i, polcoef(pols[1],i))));
        printf("Y0: %d\nY1: %d\n\n", polcoef(pols[2],0), polcoef(pols[2],1));
    )
}

special_valuation(f, p, disc) = {
    d = poldegree(f);
    pvaluation_disc = 0;
    if(disc % p == 0,
        pvaluation_disc++;
        t = disc \ p;
        if(t % p == 0, pvaluation_disc++);
    p_divides_lc = polcoef(f, d);
    if(pvaluation_disc == 0,
        e = #polrootsmod(f, p);
        if(p_divides_lc,
            assert(polcoef(f, d-1) % p);
            e++);
        return((p * e) / (p * p - 1)),
    pvaluation_disc == 1,
        e = #polrootsmod(f, p));
        if(p_divides_lc, e++;);
        return((p * e - 1) / (p * p - 1)),
    \\ default
        v = special_val0(f, p) * p;
        if(p_divides_lc,
           g = subst(polrecip(f),'x,p*'x);
           v += special_val0(g, p);
           );
        v /= p + 1.0;
        return(v);
        );
}

special_val0(f, p) = {
    c = content(f);
    i = poldegree(f);
    v = 0;
    while(c % p == 0, v++; c = c \ p);
    g = f\(p^v);
    h = subst(g, 'x, p*'x);
    assert(d > 0);
    roots = liftall(polrootsmod(g,p));
    nroots = #roots;
    assert(nroots <= d);
    r0 = 0;
    foreach(roots, r,
        c = subst(g, 'x, r);
        if(c % p,
            v += 1.0 / (p - 1),
        \\default
            assert(r >= r0);
            h = subst(h, 'x, 'x + (r - r0)\p);
            r0 = r;
            v += special_val0(h, p) \ p));
    return(v);
}

get_alpha(poly, B) = {
    \\ for F linear, we have q_p = 1 for all p, thus alpha(F) = sum(prime p <= B, log(p)/(p^2-1)) ~ 0.569959993064325
    if(poldegree(poly) == 1, return(0.569959993064325));
    disc = poldisc(poly);
    e = special_valuation(poly, 2, disc);
    alpha = (1.0 - e) * log(2.0);
    forprime(p=3, B, e = special_valuation(poly, p, disc); alpha += (1.0 / (p - 1) - e) * log(p));
    return(alpha);
}

polyscore(pols, skew) = {
    return(vecsum(abs(Vec(pols[1]))));
    \\ defaults taken from cado-nfs muprhy score calculation
    bound_f = 1e7;
    bound_g = 5e6;
    area = 1e16;
    alpha_bound = 2000;
    k = 1000;

    x = sqrt(area * skew);
    y = sqrt(area / skew);
    f = pols[1];
    g = pols[2];
    alpha_f = get_alpha(f, alpha_bound);
    alpha_g = get_alpha(g, alpha_bound);
    one_over_log_bound_f = 1.0 / log(bound_f);
    one_over_log_bound_g = 1.0 / log(bound_g);
    e = 0;
    for(i=0, k-1,
        ti = Pi / k * (i + 0.5);
        xi = x * cos(ti);
        yi = y * sin(ti);
        vf = subst(f, 'x, xi / yi) * yi^poldegree(f);
        vg = subst(f, 'x, xi / yi) * yi^poldegree(g);
        vf = log(abs(vf)) + alpha_f;
        vg = log(abs(vg)) + alpha_g;
        vf *= one_over_log_bound_f;
        vg *= one_over_log_bound_g;
        e += dickmanrho(vf) * dickmanrho(vg));
    return(real(e / k));
}

invert(pols) = {
     [Polrev(Vec(pols[1])), Polrev(Vec(pols[2]))]
}

subxk(pols, k) = {
    \\ reduce by gcd if not done already
    apol = pols[1];
    rpol = pols[2];
    apolvec = Vec(apol);
    rpolvec = Vec(rpol);
    apolvec = apolvec\content(apolvec);
    rpolvec = rpolvec\content(rpolvec);
    \\ substitute k
    apolkvec = Vec(subst(Pol(apolvec,'x),'x,'x+k));
    rpolkvec = Vec(subst(Pol(rpolvec,'x),'x,'x+k));
    \\reduce again if necessary
    apolkvec = apolkvec\content(apolkvec);
    rpolkvec = rpolkvec\content(rpolkvec);
    apolk = Pol(apolkvec, 'x);
    rpolk = Pol(rpolkvec, 'x);
    [apolk, rpolk]
}

jiggle(N, pols, skew, comment) = {
    best_score = polyscore(pols,skew);
    invpols = invert(pols);
    for(i=1,5,
        jiggled = subxk(pols, i);
        jscore = polyscore(jiggled,skew);
        if(jscore < best_score + 10, printpoly(N, jiggled, comment); best_score = jscore);
        jiggled = subxk(invpols, i);
        jscore = polyscore(jiggled,skew);
        if(jscore < best_score + 10, printpoly(N, jiggled, comment); best_score = jscore);
        jiggled = subxk(pols, -i);
        jscore = polyscore(jiggled,skew);
        if(jscore < best_score + 10, printpoly(N, jiggled, comment); best_score = jscore);
        jiggled = subxk(invpols, -i);
        jscore = polyscore(jiggled,skew);
        if(jscore < best_score + 10, printpoly(N, jiggled, comment); best_score = jscore);
    );
}

\\public api, implemented first for V case, will have to adjust for U case
polyfindv(p,q,k,composite) = {
    isu = 0;
    seqf = if(isu, U, V);
    parentN = seqf(p,q,k);
    has3 = k % 3 == 0;
    has5 = k % 5 == 0;
    has7 = k % 7 == 0;
    has11 = k % 11 == 0;
    has13 = k % 13 == 0;
    has9 = k % 9 == 0;
    paramsvec = List();
    if((k-2)%4==0 && !isu,
            d = 6;
            n = (k-2)\4;
            n_h = 2*n+1;
            foreach([-1, 1], c,
                N = 2*U(p,q,n_h)+c;
                if (N % composite == 0,
                    foreach([4,6,8], d,
                        foreach([[U(p,q,n_h\d+1), U(p,q,n_h\d)],
                                 [U(p,q,n_h\d+1), U(p,q,n_h\d-1)]], yvec,
                            paramsvec = concat(paramsvec, [N, d, yvec[1], yvec[2], "hcpell case"]))))));
    if(has9,
            o = 9;
            y1 = 1;
            y0 = -seqf(p,q,k\o); \\works in V(k\9); \\ cpells
            N = seqf(p,q,k)\seqf(p,q,k\3);
            d = 6; \\ cpells have a d6 poly for n%9==0
            paramsvec = concat(paramsvec, [N, d, y1, y0, "9 divisibility case"]));
    if(has3 && has5,
            o = 15;
            N = seqf(p,q,k)*seqf(p,q,k\o)\(seqf(p,q,k\3)*seqf(p,q,k\5));
            d = 4;
            y1 = 1;
            y0 = seqf(p,q,2*k\o);
            paramsvec = concat(paramsvec, [N, d, y1, y0, "15 divisibility case"]);
            d = 8;
            y1 = 1;
            y0 = seqf(p,q,2*k\o); \\ TODO double check this works, probably needs a different constant
            paramsvec = concat(paramsvec, [N, d, y1, y0, "15 divisibility case"]));
    if(has3 && has7,
            o = 21;
            N = seqf(p,q,k)*seqf(p,q,k\o)\(seqf(p,q,k\3)*seqf(p,q,k\7));
            d = 6;
            y1 = 1;
            y0 = seqf(p,q,2*k\o);
            paramsvec = concat(paramsvec, [N, d, y1, y0, "21 divisibility case"]));
    if(has3 || has5 || has7 || has11 || has 13, \\ other simple divisibilities
            f = factor(k,13);
            ovec = [];
            if(has3, ovec = concat(ovec, 3),
               has5, ovec = concat(ovec, 5),
               has7, ovec = concat(ovec, 7),
               has11, ovec = concat(ovec, 11),
               has13, ovec = concat(ovec, 13));
            for( j = 1, #ovec, o = ovec[j];
                               N = seqf(p,q,k)\seqf(p,q,k\o);
                               d = eulerphi(o);
                               dvec = if(eulerphi(o)==2, [4,6,8], [d]);
                               for(i = 1, #dvec, d = dvec[i];
                                   paramsvec = concat(paramsvec, [N, d, seqf(p,q,(o-1)*k\o\d+1), seqf(p,q,(o-1)*k\o\d), strprintf("%d divisibility case", o)]);
                                   paramsvec = concat(paramsvec, [N, d, seqf(p,q,(o-1)*k\o\d+1), seqf(p,q,(o-1)*k\o\d-1), strprintf("%d divisibility case", o)]);
                                   paramsvec = concat(paramsvec, [N, d, 1, V(p,q,k\o), strprintf("%d divisibility case", o)]))));

    if(1, \\ prime or composite with no small factors case
            N = V(p,q,k);
            \\ find small factors:
            factors = factor(N,10^5); \\ TODO might need adjusting
            div = 1;
            for(i = 1, #factors[,1]-1, div=div * vecprod(factors[i,]));
            N = seqf(p,q,k)\div;
            d = 6;
            y1 = U(p,q,k\d+1); \\ for some reason U works better always \\ TODO confirm this
            y0 = U(p,q,k\d);
            paramsvec = concat(paramsvec, [N, d, y1, y0, "default case"]);
            y1 = U(p,q,k\d+1);
            y0 = U(p,q,k\d-1);
            paramsvec = concat(paramsvec, [N, d, y1, y0, "default case"]);
            \\ TODO add other y1 y0?

    );
    paramsvec = Vecrev(paramsvec);
    for (i = 1, #paramsvec, params = paramsvec[i];
                            N = params[1];
                            d = params[2];
                            y1 = params[3];
                            y0 = params[4];
                            comment = params[5];
                            result = plindep(N, d, y1, y0);
                            printpoly(N, result, comment);
                            jiggle(N, result, skew, comment));
}


\\Regarding poly selection for indices divisible by 3: for CPell(3n)/CPell(n), you can use the usual lindep method, but as the number is similar in size to CPell(2n) you should pick Y0 and Y1 accordingly. Only even degrees will be possible.

\\ for generalized lucas numbers with composite index:
\\Originally Posted by charybdis
\\The rules for these numbers are essentially the same as those for Cunninghams:
\\
\\Index divisible by 3 -> poly of any even degree
\\Index divisible by 5 -> quartic (or octic, but that's only useful for difficulties above 260)
\\Index divisible by 7 -> sextic
\\Index divisible by 11 -> quintic
\\Index divisible by 13 -> sextic
\\Index divisible by 3 and 5 -> quartic (or octic for difficulties above 260)
\\Index divisible by 3 and 7 -> sextic
\\
\\There is the slightly easier sextic for an index divisible by 9 which I don't think has a direct Cunningham parallel; 2LM and 6LM are similar, but then there is no sextic for indices divisible by 3 but not 9.
\\
\\All other combinations of factors do not yield viable SNFS polynomials. For example, divisibility by 17 gives an octic but this will sieve slower than the sextic you get without dividing out the factor. Divisibility by 3 and 11 gives a degree 10 polynomial which is hopeless.

k = 789
p = 2
q = -1
f = factor(k,13);
o = if(#f == 1, f[1,1], f[1,1] == 2, f[2,1], f[1,1])
N = V(p,q,k)\V(p,q,k\o)
d = eulerphi(o)
d = if(d==2, 6, d)
x = V(p,q,(o-1)*k\o\d+1)
y = V(p,q,(o-1)*k\o\d)
result = plindep(N,d,x,y)
printpoly(N, result)
jiggle(N, result)
x = 1
y = V(p,q,k\o)
result = plindep(N,d,x,y)
printpoly(N, result)
jiggle(N, result)
x = U(p,q,(o-1)*k\o\d+1)
y = U(p,q,(o-1)*k\o\d)
result = plindep(N,d,x,y)
printpoly(N, result)
jiggle(N, result)


\\ For indices divisible by 9, CPell(9n)/CPell(3n) has a sextic poly in CPell(n), i.e. Y1 = 1, Y0 = -CPell(n).
k = 747
p = 2
q = -1
o = 9
N = V(p,q,k)\V(p,q,k\3)
d = 6
x = 1
y = V(p,q,k\o)
result = plindep(N,d,x,y)

\\ For indices divisible by 25, CPell(25n)/CPell(5n) has a ? poly in CPell(?n), i.e. Y1 = 1, Y0 = -CPell(?n).
k = 800
p = 2
q = -1
o = 25
N = V(p,q,k)\V(p,q,k\5)
d = 6
x = 1
y = V(p,q,k\o)
result = plindep(N,d,x,y)


\\ For indices divisible by 15, CPell(15n)*CPell(n)/(CPell(5n)*CPell(3n)) has a quartic poly in CPell(2n).
k = 915
p = 2
q = -1
o = 15
N = V(p,q,k)*V(p,q,k\15)\(V(p,q,k\3)*V(p,q,k\5))
d = 4
x = 1
y = V(p,q,2*k\o)
result = plindep(N,d,x,y)
printpoly(N, result)
jiggle(N, result)

\\ if k is prime or N is composite with no small divisors, divide by the order of the polynomial you're trying to find
\\ calculate target SNFS composite N
k = 866
p = 2
q = -1
\\ divide out the small factors (not sure what counts as small)
N = V(p,q,k);
\\ find small factors:
factors = factor(N,10^5)
div = 1
for(i = 1, #factors[,1]-1, div=div * vecprod(factors[i,]))
N = V(p,q,k)\div;
d = 6
x = U(p,q,k\d+1)
y = U(p,q,k\d)
result = plindep(N,d,x,y)


\\hCPells: CPell(4k+2)=2*(2*Pell(2k+1)+1)*(2*Pell(2k+1)-1)
n = 886
p = 2
q = -1
d = 6
k = (n-2)\4
n_h = 2*k+1
N = 2*U(p,q,n_h)+1 \\ +-1 for the other hCPell
x = U(p,q,n_h\d+1)
y = U(p,q,n_h\d-1)
result = plindep(N,d,x,y)
printpoly(N, result)
jiggle(N, result)

\\
\\ = [1, -41, -102, -105, -60, -15, -6, 1]~
\\ which gives poly:
\\
\\ n: {N}
\\ skew: {(result[2]/result[8])^(1/d)}
\\ c6: {result[8]}
\\ c5: {result[7]}
\\ c4: {result[6]}
\\ c3: {result[5]}
\\ c2: {result[4]}
\\ c1: {result[3]}
\\ c0: {result[2]}
\\ Y1: {x}
\\ Y0: {-y}